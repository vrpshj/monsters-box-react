{"version":3,"sources":["components/card/card.js","components/card-list/card-list.component.jsx","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["Card","className","alt","src","this","props","monster","id","name","email","Component","CardList","monsters","length","map","key","SearchBox","TextField","color","label","placeholder","variant","onChange","handleChange","App","searchChanged","e","setState","searchField","target","value","state","filteredMonsters","filter","toLowerCase","includes","fetch","then","response","json","users","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+UAEaA,G,YAAb,uKAGI,OAAO,yBAAKC,UAAU,kBACtB,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BC,KAAKC,MAAMC,QAAQC,GAA7C,4BACrB,4BAAKH,KAAKC,MAAMC,QAAQE,MACxB,4BAAKJ,KAAKC,MAAMC,QAAQG,YAN7B,GAA0BC,cCCbC,EAAW,SAAAN,GACpB,OAAGA,EAAMO,SAASC,OAAS,EAEhB,6BAAK,8CAAL,KAIJ,yBAAKZ,UAAU,aAGfI,EAAMO,SAASE,KAAI,SAAAR,GAAO,OAAG,kBAAC,EAAD,CAAMA,QAASA,EAASS,IAAKT,EAAQC,U,QCVhES,G,MAAb,uKAEI,OAAO,iCAAM,kBAACC,EAAA,EAAD,CAAWV,GAAG,eAAeN,UAAU,cAAciB,MAAM,UAAUC,MAAOf,KAAKC,MAAMc,MAAOC,YAAahB,KAAKC,MAAMe,YAAaC,QAAQ,WAAWC,SAAUlB,KAAKC,MAAMkB,oBAF5L,GAA+Bb,cCuChBc,G,wDApCb,aACC,IAAD,8BACE,gBAuBFC,cAAc,SAACC,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAvBnC,EAAKC,MAAO,CAEVnB,SAAS,GACTgB,YAAY,IALhB,E,qDAUC,IAAD,EACiCxB,KAAK2B,MAA7BnB,EADT,EACSA,SAASgB,EADlB,EACkBA,YACVI,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAAEA,EAAQE,KAAK0B,cAAcC,SAASP,EAAYM,kBAClG,OACA,yBAAKjC,UAAU,OACb,4CACA,kBAAC,EAAD,CAAWmB,YAAY,kBAAkBD,MAAM,SAASI,aAAenB,KAAKqB,gBAC5E,kBAAC,EAAD,CAAUb,SAAUoB,O,0CAWvB,IAAD,OACEI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC7EF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACf,SAAS4B,W,GAjCzB9B,cCQE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2af6f889.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './card.css';\nexport class Card extends Component {\n\n  render() {\n    return <div className='card-container'> \n    <img alt=\"monster\" src={`https://robohash.org/${this.props.monster.id}?set=set2&size=180x180`}></img>\n     <h1>{this.props.monster.name}</h1>\n     <h2>{this.props.monster.email}</h2>\n     </div>;\n  }\n}\n\n//export default Card;\n","import React from 'react';\r\nimport './card-list.style.css';\r\nimport {Card} from '../card/card';\r\nexport const CardList = props => {\r\n    if(props.monsters.length < 1)\r\n    {\r\n        return <div><h2>No Items Found</h2> </div>;\r\n    }\r\n    else\r\n    {\r\n    return <div className='card-list'>\r\n\r\n        {\r\n           props.monsters.map(monster=> <Card monster={monster} key={monster.id}></Card> )\r\n        }\r\n        </div>;\r\n    }\r\n\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport './search-box.css';\nexport class SearchBox extends Component {\n  render() {\n    return <div> <TextField id=\"search-field\" className='searchField' color='primary' label={this.props.label} placeholder={this.props.placeholder} variant=\"outlined\" onChange={this.props.handleChange} /></div>;\n  }\n}\n\nexport default SearchBox;\n","import React, { Component } from 'react';\nimport { CardList} from './components/card-list/card-list.component';\nimport { SearchBox} from './components/search-box/search-box'\nimport './App.css';\nclass App extends Component\n{\n  constructor()\n  {\n    super();\n    this.state ={\n\n      monsters:[],\n      searchField:''\n    };\n\n  }\n  render()\n  {\n    const {monsters,searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n    <div className=\"App\">\n      <h1>Monsters Box</h1>\n      <SearchBox placeholder=\"Search Monsters\" label=\"Search\" handleChange= {this.searchChanged}></SearchBox>\n      <CardList monsters={filteredMonsters}>    \n    </CardList>\n\n\n  </div>\n    );\n  }\n  searchChanged=(e)=>{\n   this.setState({searchField:e.target.value})\n }\n  componentDidMount()\n  {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json())\n    .then(users => this.setState({monsters:users}))\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}